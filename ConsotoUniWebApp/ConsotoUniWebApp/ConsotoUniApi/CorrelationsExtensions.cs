// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using ConsotoUniWebApp;
using ConsotoUniWebApp.Models;
using Microsoft.Rest;

namespace ConsotoUniWebApp
{
    public static partial class CorrelationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the ConsotoUniWebApp.ICorrelations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Correlation DeleteCorrelation(this ICorrelations operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICorrelations)s).DeleteCorrelationAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ConsotoUniWebApp.ICorrelations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Correlation> DeleteCorrelationAsync(this ICorrelations operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ConsotoUniWebApp.Models.Correlation> result = await operations.DeleteCorrelationWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ConsotoUniWebApp.ICorrelations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Correlation GetCorrelation(this ICorrelations operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICorrelations)s).GetCorrelationAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ConsotoUniWebApp.ICorrelations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Correlation> GetCorrelationAsync(this ICorrelations operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ConsotoUniWebApp.Models.Correlation> result = await operations.GetCorrelationWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ConsotoUniWebApp.ICorrelations.
        /// </param>
        public static IList<Correlation> GetCorrelations(this ICorrelations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICorrelations)s).GetCorrelationsAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ConsotoUniWebApp.ICorrelations.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Correlation>> GetCorrelationsAsync(this ICorrelations operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<ConsotoUniWebApp.Models.Correlation>> result = await operations.GetCorrelationsWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ConsotoUniWebApp.ICorrelations.
        /// </param>
        /// <param name='correlation'>
        /// Required.
        /// </param>
        public static Correlation PostCorrelation(this ICorrelations operations, Correlation correlation)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICorrelations)s).PostCorrelationAsync(correlation);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ConsotoUniWebApp.ICorrelations.
        /// </param>
        /// <param name='correlation'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Correlation> PostCorrelationAsync(this ICorrelations operations, Correlation correlation, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ConsotoUniWebApp.Models.Correlation> result = await operations.PostCorrelationWithOperationResponseAsync(correlation, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ConsotoUniWebApp.ICorrelations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='correlation'>
        /// Required.
        /// </param>
        public static object PutCorrelation(this ICorrelations operations, int id, Correlation correlation)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICorrelations)s).PutCorrelationAsync(id, correlation);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ConsotoUniWebApp.ICorrelations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='correlation'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutCorrelationAsync(this ICorrelations operations, int id, Correlation correlation, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutCorrelationWithOperationResponseAsync(id, correlation, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
