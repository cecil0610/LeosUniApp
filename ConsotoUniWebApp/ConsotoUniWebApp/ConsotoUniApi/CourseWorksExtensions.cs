// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using ConsotoUniWebApp;
using ConsotoUniWebApp.Models;
using Microsoft.Rest;

namespace ConsotoUniWebApp
{
    public static partial class CourseWorksExtensions
    {
        /// <param name='operations'>
        /// Reference to the ConsotoUniWebApp.ICourseWorks.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static CourseWork DeleteCourseWork(this ICourseWorks operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICourseWorks)s).DeleteCourseWorkAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ConsotoUniWebApp.ICourseWorks.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<CourseWork> DeleteCourseWorkAsync(this ICourseWorks operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ConsotoUniWebApp.Models.CourseWork> result = await operations.DeleteCourseWorkWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ConsotoUniWebApp.ICourseWorks.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static CourseWork GetCourseWork(this ICourseWorks operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICourseWorks)s).GetCourseWorkAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ConsotoUniWebApp.ICourseWorks.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<CourseWork> GetCourseWorkAsync(this ICourseWorks operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ConsotoUniWebApp.Models.CourseWork> result = await operations.GetCourseWorkWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ConsotoUniWebApp.ICourseWorks.
        /// </param>
        public static IList<CourseWork> GetCourseWorks(this ICourseWorks operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICourseWorks)s).GetCourseWorksAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ConsotoUniWebApp.ICourseWorks.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<CourseWork>> GetCourseWorksAsync(this ICourseWorks operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<ConsotoUniWebApp.Models.CourseWork>> result = await operations.GetCourseWorksWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ConsotoUniWebApp.ICourseWorks.
        /// </param>
        /// <param name='courseWork'>
        /// Required.
        /// </param>
        public static CourseWork PostCourseWork(this ICourseWorks operations, CourseWork courseWork)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICourseWorks)s).PostCourseWorkAsync(courseWork);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ConsotoUniWebApp.ICourseWorks.
        /// </param>
        /// <param name='courseWork'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<CourseWork> PostCourseWorkAsync(this ICourseWorks operations, CourseWork courseWork, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ConsotoUniWebApp.Models.CourseWork> result = await operations.PostCourseWorkWithOperationResponseAsync(courseWork, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ConsotoUniWebApp.ICourseWorks.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='courseWork'>
        /// Required.
        /// </param>
        public static object PutCourseWork(this ICourseWorks operations, int id, CourseWork courseWork)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICourseWorks)s).PutCourseWorkAsync(id, courseWork);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ConsotoUniWebApp.ICourseWorks.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='courseWork'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutCourseWorkAsync(this ICourseWorks operations, int id, CourseWork courseWork, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutCourseWorkWithOperationResponseAsync(id, courseWork, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
